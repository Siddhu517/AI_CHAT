let express,dotenv,cors,Configuration,OpenAIApi;_dae‍.w("express",[["default",["express"],function(v){express=v}]]);_dae‍.w("dotenv",[["*",null,function(v){dotenv=v}]]);_dae‍.w("cors",[["default",["cors"],function(v){cors=v}]]);_dae‍.w("openai",[["Configuration",["Configuration"],function(v){Configuration=v}],["OpenAIApi",["OpenAIApi"],function(v){OpenAIApi=v}]]);




dotenv.config();
const configuration = new Configuration({
  apiKey: process.env.OPENAI_API_KEY,
});

const openai = new OpenAIApi(configuration);

const app = express();

app.use(cors({ origin: process.env.CLIENT_URL }));
_dae‍.g.console.log(first)

app.use(express.json());

app.post("/", async (req, res) => {
  try {
    const prompt = req.body.prompt;
    _dae‍.g.console.log(prompt);
    const response = await openai.createCompletion({
      model: "text-davinci-003",
      prompt: `${prompt}`,
      temperature: 0,
      max_tokens: 3000,
      top_p: 1,
      frequency_penalty: 0.5,
      presence_penalty: 0,
    });
    //console.log(response.data);
    res.status(200).send({
      bot: response.data.choices[0].text,
    });
  } catch (err) {
    _dae‍.g.console.log(err);
    res.status(500).send({ err });
  }
});

const port = process.env.PORT;
app.listen(port, () =>
  console.log(`Server is running on port http://localhost:${port}`)
);
